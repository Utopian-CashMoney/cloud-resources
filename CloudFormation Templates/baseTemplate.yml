AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Vanilla CloudFormation ECS Template
Parameters:
  ApplicationEnvironment:
    Type: String
    Default: dev
  ApplicationName:
    Type: String
    Default: branches-ms
  ECRImageUri:
    Type: String
    Default: 202447729588.dkr.ecr.us-east-2.amazonaws.com/branches-ms:latest
    Description: Docker image URI for AWS
Resources:
   #Role for ECS containerContainerExecutionRole:
   ContainerExecutionRole:
      Type: AWS::IAM::Role
      Properties:
       RoleName: !Sub '${ApplicationName}-${ApplicationEnvironment}-ContainerExecutionRole'
       Description: IAM Role for ECS container
       AssumeRolePolicyDocument:
         Statement:
           - Effect: Allow
             Principal:
               Service:
               - ecs-tasks.amazonaws.com
             Action:
             - sts:AssumeRole
         Tags:
           - Key: ApplicationName
             Value: !Ref ApplicationName
           - Key: ApplicationEnvironment
             Value: !Ref ApplicationEnvironment
   #Fargate MicroService
   MicroService:
       #DependsOn:
       #- Branchesms8080Listener
       Type: AWS::ECS::Service
       DependsOn: ApiListenerRule
       Properties:
         ServiceName: !Join ['-', [!Ref ApplicationName, !Ref ApplicationEnvironment]]
         #Cluster: '{{resolve:secretsmanager:ecs-cluster-name:SecretString:ecs-cluster-name}}'
         Cluster: cashmoney
         TaskDefinition: !Ref TaskDefinition
         DeploymentConfiguration:
           MinimumHealthyPercent: 100
           MaximumPercent: 200
         DesiredCount: 1
         LaunchType: FARGATE
         NetworkConfiguration:
           AwsvpcConfiguration:
             AssignPublicIp: ENABLED
          #Subnets:
          #  - !Sub '{{resolve:secretsmanager:Team-Name/${ApplicationEnvironment}/Secret-Name:SecretString:Private-Subnet-A}}'
          #  - !Sub '{{resolve:secretsmanager:Team-Name/${ApplicationEnvironment}/Secret-Name:SecretString:Private-Subnet-B}}'
          #SecurityGroups:
          #  - !Sub '{{resolve:secretsmanager:Team-Name/${ApplicationEnvironment}/Secret-Name:SecretString:Base-SecGroup}}'
         LoadBalancers:
           - ContainerName: !Ref ApplicationName
             ContainerPort: 8081
             TargetGroupArn: !Ref TargetGroup
   # Optional
   TargetGroup:
     Type: AWS::ElasticLoadBalancingV2::TargetGroup
     Properties:
       HealthCheckIntervalSeconds: 60
       HealthCheckPath: '/api'
       HealthCheckTimeoutSeconds: 5
       HealthCheckPort: '8080'
       UnhealthyThresholdCount: 2
       HealthyThresholdCount: 2
       Name: !Sub '${ApplicationName}-${ApplicationEnvironment}-tg'
       Port: 8080
       Protocol: HTTP
       TargetGroupAttributes:
         - Key: deregistration_delay.timeout_seconds
           Value: '60'
       TargetType: ip
       #VpcId: !Sub '{{resolve:secretsmanager:Team-Name/${ApplicationEnvironment}/Secret-Name:SecretString:vpc-id}}'
       VpcId: vpc-0366873350b93b913
   # Fargate Task Definition
   TaskDefinition:
     Type: AWS::ECS::TaskDefinition
     Properties:
       Family: !Sub ${ApplicationName}-${ApplicationEnvironment}
       RequiresCompatibilities:
         - FARGATE
       Memory: 'Memory'
       Cpu: 'CPU'
       NetworkMode: awsvpc
       #ExecutionRoleArn: !Sub '{{resolve:secretsmanager:Team-Name/${ApplicationEnvironment}/Secret-Name:SecretString:ecs-task-execution-role}}'
       ExecutionRoleArn:
         Ref: ContainerExecutionRole
       TaskRoleArn: !Ref ContainerExecutionRole
       ContainerDefinitions:
         - Name: !Ref ApplicationName
           Image: !Ref ECRRepositoryUri # This gets passed as param from ecs.json generated in buildspec
           PortMappings:
             - ContainerPort: 8080
           Essential: true
           Memory: 2048
           LogConfiguration:
             LogDriver: awslogs
             Options:
               awslogs-group: !Sub /ecs/Team-Name/${ApplicationName}/${ApplicationEnvironment}
               awslogs-region: !Ref AWS::Region
               awslogs-stream-prefix: ecs
               awslogs-create-group: 'true'
   Listener:
     Type: AWS::ElasticLoadBalancingV2::Listener
     Properties:
       DefaultActions:
       - ForwardConfig:
           TargetGroups:
           - TargetGroupArn:
               Ref: TargetGroup
         Type: forward
       LoadBalancerArn:
         Ref: LoadBalancer
       Port: 8080
       Protocol: HTTP
   #Listener Rule
   ApiListenerRule:
     Type: AWS::ElasticLoadBalancingV2::ListenerRule
     Properties:
       Conditions:
       - Field: path-pattern
       Values:
         - /api/*
         - /api*
       Actions:
         - Type: forward
           TargetGroupArn: !Ref TargetGroup
       ListenerArn: !Ref Listener

   # ListenerArn: !Sub '{{resolve:secretsmanager:Team-Name/${ApplicationEnvironment}/Secret-Name:SecretString:listener-arn}}'
