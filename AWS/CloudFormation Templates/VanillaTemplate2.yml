#Vanilla Microservice Template for CloudFormation
AWSTemplateFormatVersion: 2010-09-09
Resources:
  #CloudMap
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project docker-compose #Edit
      Name: docker-compose.local #Edit
      Vpc: vpc-3661fb5d #Change?
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    
  #Cluster
  Cluster: #Update
    Properties:
      ClusterName: docker-compose #Edit
      Tags:
      - Key: com.docker.compose.project #Parameterize
        Value: docker-compose #Parameterize
    Type: AWS::ECS::Cluster
   
  #Default Network Security Group
  DefaultNetwork: #Update
    Properties:
      GroupDescription: docker-compose Security Group for default network
      Tags:
      - Key: com.docker.compose.project #Parameterize
        Value: docker-compose #Parameterize
      - Key: com.docker.compose.network #Parameterize
        Value: docker-compose_default #Parameterize
      VpcId: vpc-3661fb5d #Change?
    Type: AWS::EC2::SecurityGroup
    
  #Default Ingress
  DefaultIngress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: branchesms:8080/ on default network #Edit
      FromPort: 8080 #Parameterize
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      ToPort: 8080 #Parameterize
    Type: AWS::EC2::SecurityGroupIngress
    
  #Default Network Ingress
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
    
  #LogGroup
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/docker-compose #Change?
    Type: AWS::Logs::LogGroup
    
  #LoadBalancer
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: DefaultNetwork
      Subnets:
      - subnet-ef1e3da3
      - subnet-e4a45f99
      - subnet-d223a1b9
      Tags:
      - Key: com.docker.compose.project #Parameterize
        Value: docker-compose #Parameterize
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

  #Microservice Listener
  BranchesmsListener: #Change
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: BranchesmsTargetGroup #Change
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 8080 #Parameterize
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
   
  #Microservice Target Group
  BranchesmsTargetGroup: #Change
    Properties:
      Port: 8080 #Parameterize
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project #Parameterize
        Value: docker-compose #Parameterize
      TargetType: ip
      VpcId: vpc-3661fb5d #Change?
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    
  #Microservice Service Declaration
  BranchesmsService: #Change
    DependsOn:
    - BranchesmsListener #Change
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: branchesms #Parameterize
        ContainerPort: 8080 #Parameterize
        TargetGroupArn:
          Ref: BranchesmsTargetGroup #Change
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork #Change?
          Subnets:
          - subnet-ef1e3da3
          - subnet-e4a45f99
          - subnet-d223a1b9
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - BranchesmsServiceDiscoveryEntry #Change
          - Arn
      Tags:
      - Key: com.docker.compose.project #Parameterize
        Value: docker-compose #Parameterize
      - Key: com.docker.compose.service #Parameterize
        Value: branchesms #Parameterize
      TaskDefinition:
        Ref: BranchesmsTaskDefinition #Change
    Type: AWS::ECS::Service
    
  #Microservice Service Discovery Entry in Cloud Map
  BranchesmsServiceDiscoveryEntry: #Change
    Properties:
      Description: '"branchesms" service discovery entry in Cloud Map' #Change
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: branchesms #Parameterize
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
   
  #Microservice Task Definition
  BranchesmsTaskDefinition: #Change
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-2.compute.internal
        - docker-compose.local #Change?
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker-compose
        Name: Branchesms_ResolvConf_InitContainer #Parameterize
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Branchesms_ResolvConf_InitContainer #Parameterize
        Essential: true
        Image: 202447729588.dkr.ecr.us-east-2.amazonaws.com/branches-ms:latest@sha256:7891184f31d3407182bcd9453da92017f2f846429a9f1312d8ff8a87af757173 #Parameterize?
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker-compose #Change?
        Name: branchesms #Parameterize
        PortMappings:
        - ContainerPort: 8080 #Parameterize
          HostPort: 8080 #Parameterize
      Cpu: "256"
      ExecutionRoleArn:
        Ref: BranchesmsTaskExecutionRole #Change
      Family: docker-compose-branchesms #Change?
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
   
  #Microservice Task Execution Role
  BranchesmsTaskExecutionRole: #Change
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project #Parameterize
        Value: docker-compose #Parameterize
      - Key: com.docker.compose.service #Parameterize
        Value: branchesms #Parameterize
    Type: AWS::IAM::Role
