AWSTemplateFormatVersion: 2010-09-09
Resources:
  Branchesms8080Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: Branchesms8080TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 8080
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  Branchesms8080TargetGroup:
    Properties:
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      TargetType: ip
      VpcId: vpc-3661fb5d
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  BranchesmsService:
    DependsOn:
    - Branchesms8080Listener
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: branchesms
        ContainerPort: 8080
        TargetGroupArn:
          Ref: Branchesms8080TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-ef1e3da3
          - subnet-e4a45f99
          - subnet-d223a1b9
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - BranchesmsServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      - Key: com.docker.compose.service
        Value: branchesms
      TaskDefinition:
        Ref: BranchesmsTaskDefinition
    Type: AWS::ECS::Service
  BranchesmsServiceDiscoveryEntry:
    Properties:
      Description: '"branchesms" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: branchesms
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  BranchesmsTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-2.compute.internal
        - docker-compose.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker-compose
        Name: Branchesms_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Branchesms_ResolvConf_InitContainer
        Essential: true
        Image: 202447729588.dkr.ecr.us-east-2.amazonaws.com/branches-ms:latest@sha256:7891184f31d3407182bcd9453da92017f2f846429a9f1312d8ff8a87af757173
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker-compose
        Name: branchesms
        PortMappings:
        - ContainerPort: 8080
          HostPort: 8080
      Cpu: "256"
      ExecutionRoleArn:
        Ref: BranchesmsTaskExecutionRole
      Family: docker-compose-branchesms
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  BranchesmsTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      - Key: com.docker.compose.service
        Value: branchesms
    Type: AWS::IAM::Role
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project docker-compose
      Name: docker-compose.local
      Vpc: vpc-3661fb5d
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: docker-compose
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
    Type: AWS::ECS::Cluster
  Default8000Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: userms:8000/ on default network
      FromPort: 8000
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      ToPort: 8000
    Type: AWS::EC2::SecurityGroupIngress
  Default8020Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: loansms:8020/ on default network
      FromPort: 8020
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      ToPort: 8020
    Type: AWS::EC2::SecurityGroupIngress
  Default8080Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: branchesms:8080/ on default network
      FromPort: 8080
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: docker-compose Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      - Key: com.docker.compose.network
        Value: docker-compose_default
      VpcId: vpc-3661fb5d
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: DefaultNetwork
      Subnets:
      - subnet-ef1e3da3
      - subnet-e4a45f99
      - subnet-d223a1b9
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  Loansms8020Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: Loansms8020TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 8020
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  Loansms8020TargetGroup:
    Properties:
      Port: 8020
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      TargetType: ip
      VpcId: vpc-3661fb5d
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  LoansmsService:
    DependsOn:
    - Loansms8020Listener
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: loansms
        ContainerPort: 8020
        TargetGroupArn:
          Ref: Loansms8020TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-ef1e3da3
          - subnet-e4a45f99
          - subnet-d223a1b9
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - LoansmsServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      - Key: com.docker.compose.service
        Value: loansms
      TaskDefinition:
        Ref: LoansmsTaskDefinition
    Type: AWS::ECS::Service
  LoansmsServiceDiscoveryEntry:
    Properties:
      Description: '"loansms" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: loansms
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  LoansmsTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-2.compute.internal
        - docker-compose.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker-compose
        Name: Loansms_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Loansms_ResolvConf_InitContainer
        Essential: true
        Image: 202447729588.dkr.ecr.us-east-2.amazonaws.com/loans-ms:latest@sha256:8025cdbc92ba6ecb567e8cdeffabfd12721233117283a983033a0c3c9eeddc8a
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker-compose
        Name: loansms
        PortMappings:
        - ContainerPort: 8020
          HostPort: 8020
      Cpu: "256"
      ExecutionRoleArn:
        Ref: LoansmsTaskExecutionRole
      Family: docker-compose-loansms
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  LoansmsTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      - Key: com.docker.compose.service
        Value: loansms
    Type: AWS::IAM::Role
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/docker-compose
    Type: AWS::Logs::LogGroup
  Userms8000Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: Userms8000TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 8000
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  Userms8000TargetGroup:
    Properties:
      Port: 8000
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      TargetType: ip
      VpcId: vpc-3661fb5d
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  UsermsService:
    DependsOn:
    - Userms8000Listener
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: userms
        ContainerPort: 8000
        TargetGroupArn:
          Ref: Userms8000TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-ef1e3da3
          - subnet-e4a45f99
          - subnet-d223a1b9
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - UsermsServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      - Key: com.docker.compose.service
        Value: userms
      TaskDefinition:
        Ref: UsermsTaskDefinition
    Type: AWS::ECS::Service
  UsermsServiceDiscoveryEntry:
    Properties:
      Description: '"userms" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: userms
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  UsermsTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-2.compute.internal
        - docker-compose.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker-compose
        Name: Userms_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Userms_ResolvConf_InitContainer
        Essential: true
        Image: 202447729588.dkr.ecr.us-east-2.amazonaws.com/user-ms:latest@sha256:ba7a1a2e6fd271de9f9736990814f07f098ddb366ffc916f9f69cf3d220f0839
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: docker-compose
        Name: userms
        PortMappings:
        - ContainerPort: 8000
          HostPort: 8000
      Cpu: "256"
      ExecutionRoleArn:
        Ref: UsermsTaskExecutionRole
      Family: docker-compose-userms
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  UsermsTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: docker-compose
      - Key: com.docker.compose.service
        Value: userms
    Type: AWS::IAM::Role
